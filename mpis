#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# This file is part of MPIS (https://github.com/KernelPanicBlog/MPIS).
#
# MPIS (Manjaro Post Installation Script) is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3 of the License, or
# any later version.
#
# MPIS (Manjaro Post Installation Script):
# It allows  users to choose different options such as
# install an application or config some tools and environments.
#
# MPIS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MPIS; If not, see <http://www.gnu.org/licenses/>.

import sys
import traceback
from mpislib import core

mpisw = core.Mpis()


def main():
    try:
        core.show_banner()
        core.show_help()
        option, m_actual = 0, 0
        m_back = []
        print("\n\033[1;36m" + mpisw.menus[m_actual].title + "\033[1;m")
        for item in mpisw.menus[m_actual].items:
            print("\033[1;36m" + item.option + ".- " + item.title + "\033[1;m")
        while True:
            try:
                option = core.user_input()
                if option in core.mkopts("back"):
                    if len(m_back):
                        m_actual = m_back.pop()
                elif option in core.mkopts("help"):
                    core.show_help(False)
                elif option in core.mkopts("exit"):
                    core.end_message()
                elif int(option) > 0 <= len(mpisw.menus[m_actual].items) != 0:
                    if mpisw.menus[m_actual].items[int(option) - 1].ismenu == \
                            "True":
                        m_back.append(m_actual)
                        nm = core.search_menu(
                             mpisw.menus[m_actual].items[int(option) - 1].name,
                             mpisw.menus)
                        if nm != 0:
                            m_actual = nm
                    else:
                        tr = core.search_commands(
                             mpisw.menus[m_actual].items[int(option) - 1].name,
                             mpisw.apps)
                        if tr is None:
                            print(core.errors["0x001"])
                        elif tr.commands[0] == "help":
                            core.show_help(False)
                        elif tr.commands[0] == "back":
                            if len(m_back):
                                m_actual = m_back.pop()
                        elif tr.commands[0] == "exit":
                            core.end_message()
                        elif tr.commands[0] == "SeeMirrorList":
                            with open("/etc/pacman.d/mirrorlist", "r") as f:
                                print(f.read())
                            core.pause()
                        elif tr.commands[0] == "unistallPackages":
                            pass
                        else:
                            core.execute_command(tr.commands, tr.sequentially)
                else:
                    core.pause(core.messages["msgNOp"])
            except ValueError:
                pass
            core.clear()
            print("\033[1;36m"+mpisw.menus[m_actual].title+"\033[1;m")
            for item in mpisw.menus[m_actual].items:
                print("\033[1;36m"+item.option + ".- " + item.title+"\033[1;m")
    except KeyboardInterrupt:
        print(core.messages["msgCtrl+C"])
        core.sleep()
        core.clear()
    except Exception:
        traceback.print_exc(file=sys.stdout)
    sys.exit(0)

if __name__ == "__main__":
    main()
